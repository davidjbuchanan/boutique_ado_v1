Goto https://github.com/Code-Institute-Org/gitpod-full-template
    Use template
    Name repo
    Make public
    Open Gitpod (you'll need the Gitpod addon)

cli: pip3 install django
cli: django-admin startproject boutique_ado .
cli: touch .gitignore
    add *.sqlite3
    add *.pyc
    add __pycache__

In the file explorer now we'll see we have 3 new items: 
boutique_ado    manage.py   .gitignore   

cli: python3 manage.py runserver
    to check - looks good

cli: ^c
    close server

cli: python3 manage.py migrate
cli: python3 manage.py createsuperuser

cli: git status
cli: git remote -v
cli: git add .
cli: git commit -m "initial commit"
cli: git push

cli: pip3 install django-allauth

From allauth documentation copy and paste settings into settings.py file
    https://django-allauth.readthedocs.io/en/latest/installation.html
    you need:
1)  'django.template.context_processors.request',           should already be there under TEMPLATES
    allows allauth and django to access the HTTP request object in our templates.
    E.g., if we wanted to access request.user or request.user.email in our django templates. We'll be able to do it with this context processor.
    It's required because the allauth templates which we'll see and customize later on use the request object frequently.
2)  AUTHENTICATION_BACKENDS
        remove before and after dots
        see notes in the actual file
3)  from INSTALLED_APPS
        'django.contrib.sites',
            used by the allauth.socialaccount to create the proper callback URLs
        'allauth',
            this is the actual allauth app
        'allauth.account',
            allows all the basic account login/logout/registration/password resets
        'allauth.socialaccount'
            allows logins via social media
4)  add the following phrase after AUTHENTICATION_BACKENDS section:
    SITE_ID = 1
5)  add the following phrase after SITE_ID = 1: 
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    Note: by default allauth will send confirmation emails to any new accounts. We need to temporarily log those emails to the console so we can get the confirmation links.
6)  see below.

update urls.py (line 17 and 21) to give us the urls needed to login/logout etc

cli: python3 manage.py migrate  
    we added apps so now we have to make migrations

cli: python3 manage.py runserver
    see 404, goto /admin, login, click sites, click example, update domain name and display name. Save
        critical if you want to use social media authentication

cli: ^c

6 continued)  add the following phrases after EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
        The account authentication method is what tells allauth that we want to allow authentication using either usernames or emails.
    ACCOUNT_EMAIL_REQUIRED = True
        email is required to register for the site.
    ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
        Verifying your email is mandatory so we know users are using a real email.
    ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = True
        required to enter their email twice on the registration page
    ACCOUNT_USERNAME_MIN_LENGTH = 4
        a minimum username length of four characters.
    LOGIN_URL = '/accounts/login/'
        specifying a login url and a url to redirect back to after logging in.
    LOGIN_REDIRECT_URL = '/'
        change to LOGIN_REDIRECT_URL = '/success' for the test below , then change it back

cli: python3 manage.py runserver
    see 404, goto /accounts/login/.
    Login using the superuser id and password.
        See 'Verify Your E-mail Address' but this won't work because this id was created before installing allauth.
        Therefore, add email manually
        goto /admin, see all models listed, click email addresses, click add email address, enter id, generate email, check all boxes, save, logout
    goto /accounts/login/
    Login using the superuser id and password.
        see url ending in /success
        this proves authentication is working properly
        change the settings from '/success' back to '/'

cli: pip3 freeze > requirements.txt

cli:mkdir templates
    this produces a project level templates file for base.html (so not an app based templates directory)

cli:mkdir templates/allauth
    puts an allauth dir in the templates dir (both of which will be in the project level)

cli: git status
    see:
        boutique_ado/settings.py
        boutique_ado/urls.py
        instructions.txt
        requirements.txt
cli: git add .
cli: git commit -m "setup allauth"
cli: git push

Customise the supplied allauth templates:
-   they live in the site-packages directory (see hello django repo on github)
cli: cp -r ../.pip-modules/lib/python3.8/site-packages/allauth/templates/* ./templates/allauth/
    cp - r which means to copy(cp) recursively (-r)
     ../ to go up one level from where we are right now
    .pip-modules/lib /python (press tab to autopoulate)
    /site-packages /allauth/templates
    /* copies everything in the directory
     ./templates/allauth/ is the destination you want to move to
-   If you want to use the standard allauth templates i.e. not customise them then delete from the templates/allauth dr
        delete openid
        delete tests
End (customise the supplied allauth templates)

cli: touch templates/base.html
    opens a file in the project level's template directory (i.e. not the app level)
    goto getbootstarp, vlick documentation, scroll to starter template, copy it paste it in to base,html
    add a line to base.html header: <meta http-equiv="X-UA-compatible" content="ie=edge">
        Will allow support of older Internet Explorer versions and eliminate validation errors when validating our HTML.
    Update title
    move script files to header

cli: git status
    see:
        templates/
cli: git add .
cli: git commit -m "added allauth templates and base templates"
    see:
        47 file changes
cli: git push

back to project's base.html
    add {% add static %} 
        allows addition of static files later
    add lots of {%%} blocks

cli: git status
    see:
        templates/base.html
cli: git add .
cli: git commit -m "added blocks to base template"
cli: git push

---------------------------------------------------------------------------------------------------------------------------------------------------------cli: python3 manage.py startapp home
    new app for homepege opens
    see folders:
        boutique_ado
        templates
        home folder

cli: mkdir -p home/templates/home
    makes a templates and internal home directory in the home app
    - add an index.html file and add some test content

Render the home app's index page
-   create a view for the app's index page from the existing views.py file
        at the app level goto home/views.py
-   create a urls.py file for the app's index page by copying and pasting the projects urls.py file
        goto boutique_ado at the project level and duplicate 'urls.py', put it in the app (home) and name it 'urls.py'
            strip out the top docstring
            delete the include import
            delete the existing paths
            include the import on line 3
            include the path to the app's index.html on line 6
-   update project level urls.py file line 22
-   Goto project level settings.py file
        add 'home' to the list of INSTALLED_APPS
        add the following to the DIRS in TEMPLATES:
            os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, 'templates', 'allauth'),
cli: python3 manage.py runserver
    see:
        It works! in big green writing
End(render the home app's index page)

cli: ^c
cli: git status
    see:
        boutique_ado/settings.py
        boutique_ado/urls.py
        instructions.txt
        home/
cli: git add .
cli: git commit -m "added home app and templates"
cli: git push

Update home/templates/home/index.html
cli: git status 
    see:
       home/templates/home/index.html
cli: git add .
cli: git commit -m "Added homepage content"
cli: git push        

Update templates/base.html
cli: git status 
    see:
       templates/base.html
cli: git add .
cli: git commit -m "Added main page header"
cli: git push        

cli: python3 manage.py runserver
    see:
        really rough looking home page
    Note: If you perform a search e.g. search for frog then the resultant url will end .gitpod.io/?q=frog. The q confirms the form is working as the form's name=q - see project level template/base.html

cli: mkdir static
    where css and js files will live
cli: mkdir static/css 
    then create a base.css file
    add styling for html and body tags 
cli: mkdir media
    holds the images and is where new images are uploaded to
    add homepage_background_cropped.jpg from Kaggle.com

cli: python3 manage.py runserver
    see:
        really rough looking home page - but can't see background image

goto static/css/base.css file
    add the rest of the css

goto templates/base.html
    add base.css link
    add Lato font link
        goto google fonts
        search for Lato
        click lato 
        select regular 400 and + select this style
        click Embed 
        copy and paste link
    add FA font link
        goto FA
        login
        scroll to FA fits 
        click manage kits 
        click aOff73228b
        copy and paste link

goto settings.py and underneath the STATIC_URL setting.
    add STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)
        Which is going to tell Django where all of our static files are located.
        It is worth noting that although normally we would also want to supply a static route setting here for Django's collect static utility to work.
        I'm not going to do that because it will interfere with setting up Amazon Web Services later on.
        Has to be a tuple, hence the brackets and comma at end
    add MEDIA_URL = '/media/'
    add MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
        which is where all uploaded media files will go.

To allow Django to see the media (remember the background image with the girl is still not visible
    goto boutique_ado/urls.py
        import settings
        import the static function
            to add the MEDIA_URL to our list of URLs.
        then use the static function:
            add + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

cli: python3 manage.py runserver
    see:
        looks good - can see background image. The main site header is now visible on large viewports only. With the logo in the upper left the search bar in the middle and the My account and shopping bag links on the right.

cli: git status
    see:
        media
        static
cli: git add .
cli: git commit -m "completed home page header and css"
cli: And git push

Now we add header for small viewports and extend the header features (for all vp sizes) to allow users to sort
    goto templates/base.html
        add further navbar Code
        Note: this won't preview (i.e. python3 manage.py runserver) because of the Django Template Logic is not linked to anything so 404 error.

    cli: mkdir templates/includes
        a commonly occuring directory in larger web projects
        place to create HTMLsnippets and then include them in the base.html template using Django.
        Create 2 new files:
            main-nav.html
            mobile-top-header.html
    
    cli: python3 manage.py runserver
        see a responsive header with all functionality
end (Now we add header for small viewports ........... to allow users to sort)

---------------------------------------------------------------------------------------------------------------------------------------------------------start Products app
    set up free shipping banner
        add free_shipping_threshold to base.html (which will then link to products app later) and class to base.css
        check to out:
            cli: python3 manage.py runserver
                see a banner that doesn't function yet - need to add products app

cli: git status
    see:
        static/css/base.css
        templates/base.html
        templates/includes/
cli: git add .
cli: git commit -m "added mobile_header and main navbar"
cli: And git push

download images from CI into media directory. Goto:
    https://github.com/Code-Institute-Solutions/boutique_ado_images/tree/master/pics
    go back a page
    click clone or download
    click download zip
    goto c drive downloads on your computer
    right click 
    select Extract All..
    then drag and drop into media file

cli: python3 manage.py startapp products

goto settings.py    
    add products to INSTALLED_APPS

cli: mkdir products/fixtures
    Fixtures are used to load data very quickly into a django database so we don't have to do it all manually in the admin.
    Drag and drop the categories and products json files from the earlier download
        Read the json files on a reader, e.g. https://jsonformatter.org/
            Each item has a primary key; the model it'll use; a category id (which refers to the primary key) of one of the categories in the other fixture file.
            When we use these fixtures we'll first create the categories and then the productssince Django will need to know which category each product goes in.

Goto products/models.py
    add class for Category and Product
    Notes on code:
    Add a friendly name for the front end. Max length of 254. Null equals true and blank equals true so that the friendly name is optional.
    If you look at bed and bath in the categories fixture for example you'll see the friendly name is a bit nicer, but the name field gives us a
    programmatic way to find it in things like views and other code.
    create a string method: Which takes in the category model itself. And then returns self.name
    For the on_delete: set any products that use it to have null for this field rather than deleting the product.
    Each product requires a name, a description, and a price. But everything else is optional.

cli: python3 manage.py makemigrations --dry-run
    identify any potential issues
        Error: ModuleNotFoundError: No module named 'homeproducts'
            turns out I was missing a comma in the settings.py 
cli: python3 manage.py makemigrations --dry-run
        Errors: Cannot use image field because Pillow is not installed
cli: pip3 install pillow
cli: python3 manage.py makemigrations --dry-run
    no issues
cli: python3 manage.py makemigrations
    creates models
cli: python3 manage.py migrate --plan
    to see if there are any issues with the models
    no issues
cli: python3 manage.py migrate
    note: shouldn't use this command freely as it could migrate multiple apps

Goto products/admin.py
    import Product and Category models

So we've got our models created; our fixtures ready to go; our product images uploaded; and our migrations applied. The only thing left to do is actually use these fixtures.

cli: python3 manage.py loaddata categories
    see:
        the cli should show 9 objects installed onto Django
cli: python3 manage.py loaddata products
    see:
        the cli should show 172 objects installed onto Django

cli: python3 manage.py runserver
Goto /admin 
    see: 
        Products
        see:
            Categorys (intentional misspell) and Products 
       
cli: git status
    seetings.pv
    loads of images
    products
cli: git add .
cli: git commit -m "added products app, models and fixtures"
cli: git push

To fix the misspelling of Catagorys add the class Meta to products/models.py
    this update to the model doesn't require migration as there is no change to the class structure

cli: python3 manage.py runserver
Goto /admin 
    see:
        Products
        see:
            Categories (misspell corrected) and Products
            check products  
                see a massive vertical list of product names
                    To fix goto products/admin.py
                        add class ProductAdmin

cli: python3 manage.py runserver
    Goto /admin/Products/Products 
        see:
            look at all the products listed out nicely
cli: git add .
cli: git commit -m "customized admin"

So now we can see our products in the websites Django Admin page. Lets get a view so we can see them on the website's GUI like a user would
Goto products/views.py
    populate

Create products/url.py
    populate

Reference them in the project level urls
    goto boutique_ado/urls.py
        update with path to products url

Create a templates and inner products directory simultaneously  
    cli: mkdir -p products/templates/products
    create a products.html file
        populate with the header (from home template) and the products template variable in double curly braces
    cli: python3 manage.py runserver
    goto /products  
        see:
            big json file - looks ugly

cli: git add .
cli: git commit -m "added views and template"
cli: git push

goto products/templates/products/products.html and static/css/base.css
    populate with white overlay class
    
cli: python3 manage.py runserver 
    check the products page is white and has json data


gooto products/templates/products/products.html 
    populate
    use Django built in templates   
        https://docs.djangoproject.com/en/3.0/ref/templates/builtins/

cli: git add .
cli: git commit -m "started product template"
cli: git push

Link products page to navbar and callout
    Callout: templates/home/index.html
    Navbar: templates/includes/main-nav.html 

---------------------------------------------------------------------------------------------------------------------------------------------------------
Product details page
    To create the product details page we need a new view which will take the product id as a parameter and return the template including the product, this will be almost identical to the all products view so I'll copy that as a base.

add to products/views.py  

add to products/urls.py

add a products/templates/product_detail.html file

goto products/templates/products.html
    put in links to product_detail.html file

cli: git add .
cli: git commit -m "added product details functionality"
cli: git push

---------------------------------------------------------------------------------------------------------------------------------------------------------
Search by word in the header's search bar

Goto templates/base.html
    see form at line 49
        this is where the search form request is sent to

Similarly
    Goto templates/includes/mobile-top-header.html
    see form at line 14
        this is where the search form request is sent to

We can access those url parameters in the all_products view by checking whether request.get exists.
    Goto products/views.py

I created a views_annotated.py with all the comments in.

Test:
cli: python3 manage.py runserver
    search works for jeans - returns products called jeans
    search works for soft - returns products with a soft in the description
    conclusion search works for products and descriptions

cli: git add . 
cli: git commit -m "Added search functionality"
cli: git push

---------------------------------------------------------------------------------------------------------------------------------------------------------
Search by Category using the header's dropdown menus

Goto templates/includes/main-nav.html
    E.g. for Activewear & Essentials
    In order to handle filtering by category, I'm gonna pass a category parameter to the products URL (see line 20) just like we're doing with q for search queries (in section above).
    These parameters will use the name field (line 8) from the category model (products/views.py) so we have a programmatic way to access them.

the url at products/urls.py needs no update
the views.py does see annotated notes on views_annotated.py

cli: python3 manage.py runserver    
    works fine
     notice that the view will filter all products based on there category name alone and post to the template
cli: git add . 
cli: git commit -m "Added category filtering"
cli: git push

---------------------------------------------------------------------------------------------------------------------------------------------------------
Sorting products 1

put links in main-nav.html, i.e.
    <div class="dropdown-menu border-0" aria-labelledby="all-products-link">
        <a href="{% url 'products' %}?sort=price&direction=asc" class="dropdown-item">By Price</a>
        <a href="{% url 'products' %}?sort=rating&direction=desc" class="dropdown-item ">By Rating</a>
        <a href="{% url 'products' %}?sort=category&direction=asc" class="dropdown-item ">By Category</a>
        <a href="{% url 'products' %}" class="dropdown-item">All Products</a>
    </div>

add to products/view.py

cli: git add . 
cli: git commit -m "Added sorting"
cli: git push
---------------------------------------------------------------------------------------------------------------------------------------------------------
Sorting products 2

render the category name (friendly) under each items name (in the products and product detail) pages:
    update products/templates/products/products.html and products/templates/products/product_detail.html

render a sort selector and breadcrumb in products/templates/products/products.html 

then he updateds the views.py with 
    """if sortkey == 'category':
        sortkey = 'category__name'"""
no idea why

cli: git add . 
cli: git commit -m "Added sorting and product counts to product page"
cli: git push

---------------------------------------------------------------------------------------------------------------------------------------------------------
Sorting products 3

Allow the #sort-select-wrapper to work at products/templates/products.html
    add JQ at bottom of page and Lower module to the view at products/views.py
        Allows the name sorting to occur

Added button to allow users to scrollto top of page. 
    products/templates/products.html HTML and JQ
    static/css/base.css

cli: git add . 
cli: git commit -m "Added sorting js and back to top link"
cli: git push

---------------------------------------------------------------------------------------------------------------------------------------------------------
The shopping bag
cli: python3 managae.py startapp bag
goto boutiquae_ado/settings.py
    add to INSTALLED_APPS

GOTO bag/views.py
    All I'm doing is copying the view from the home app and changing its name the template it returns and it's docstring.

Create bag/templates dir
    cli: mkdir -p bag/templates/bag
        create and add a bag.html to it
            copying the index template from the home app - PASTE IT IN
                remove contents of the 'block content'

Copy the home URLs file. 
    Create a new one in the bag app and paste it in.
        update the view.
        update the name.
    And then include the bag URLs in the project level URLs file.

Add link to base.html and mobile-top-header.html @ templates.

cli: python3 manage.py runserver
    click bag
        link works - just an empty page with shell html i.e. bg and header

update bag/templates/bag/bag.html

cli: git add . 
cli: git commit -m "Added shopping bag app urls and template"
cli: git push

At this point we have a page to display our shopping bag but we don't have any functionality to track what's in the bag.
The first part of that functionality is going to live in a new file called contexts.py.

cli: touch contexts.py
    populate

Note: inside this file, create a function called bag_contents. Which will take the request as a parameter. Instead of returning a template though this function will return a dictionary called context which we're about to create. This is what's known as a context processor. And its purpose is to make this dictionary available to all templates across the entire project, on every app. Much like you can use request.user in any template due to the presence of the built-in request context processor. 
    This context concept is the same as the context we've been using in our views (e.g. ) the only difference is we're returning it directly and making it available to all templates by putting it in settings.py.

In order to make this context processor available to the entire application we need to add it to the list of context processors in the templates variable in settings.py
    goto settings.py
        add to TEMPLATES
            This simple change means that anytime we need to access the bag contents in any template across the entire site they'll be available to us
            without having to return them from a whole bunch of different views across different apps.

In order to entice customers to purchase more. We're going to give them free delivery if they spend more than the amount specified in the free delivery threshold in settings.py.
    goto settings.py
        Also added 2 new variables
            FREE_DELIVERY_THRESHOLD = 50
            STANDARD_DELIVERY_PERCENTAGE = 10
Test
    cli: python3 manage.py runserver
        see:
            banner shows "FREE DELIVERY ON ORDERS OVER $50!"
                the "50" shows it is working
cli: git add . 
cli: git commit -m "Added bag context and delivery logic"
cli: git push
---------------------------------------------------------------------------------------------------------------------------------------------------------
Adding products (to the shopping bag) part 1

goto products/templates/products/product_detail.html
    populate with form and update base.css with .btn-outline-black styling

add an add_to_bag view to bag/views.py
    populate

add a url to bag/urls.py

add an action attribute to the form in products/templates/products/product_detail.html
    notr: the site will just error 500 if you add this too soon

cli: python3 manage.py runserver
    add stuff and see the dictionary grow on the cli

cli: git add . 
cli: git commit -m "added add to bag functionality"
cli: git push

---------------------------------------------------------------------------------------------------------------------------------------------------------
Adding products (to the shopping bag) part 2

Goto bag/context.py (the context processor)
    add imports, bag session and for statement to populate the bag

Goto bag/templates/bag.html
    populate with {{ bag_items }} and test if bag populates

cli: python3 manage.py runserver
    add some items
    check bag
    should see dictionary with item id product name and quantity
    also bag icon displayed with grand total

cli: git add . 
cli: git commit -m "updated context processor"
cli: git push

Now that we know that works
    delete with {{ bag_items }}
    populate with table

cli: python3 manage.py runserver
    goto bag
    see items listed in table

cli: git add . 
cli: git commit -m "updated shopping bag template"
cli: git push

---------------------------------------------------------------------------------------------------------------------------------------------------------
Adding products (to the shopping bag) part 3

Enable users to be able to choose sizes
    goto products/models.py
        add has_sizes boolean to Product class
        Because this is a change to the structure of the model. We'll need to run migrations for this.

            cli: python3 manage.py makemigrations --dry-run
                see: 
                    Migrations for 'products':
                    products/migrations/0002_auto_20200702_1119.py
                    - Change Meta options on category   (made this change ages ago - changes catagory's to catagories)
                    - Add field has_sizes to product
            cli: python3 manage.py makemigrations
                see new file in products/migrations
                    0002_auto_20200702_1121.py
            cli: python3 manage.py migrate --plan
                see something similar to before - no new file
            cli: python3 manage.py migrate
                see: ok

With that finished we're gonna dive into a very handy tool for exploring and making changes to the items in our database.
    cli: python3 manage.py shell
        What this does is drop us to a cli which is configured using our settings.py file. So it can act just as if we were writing python code in a view. This means we can import and use any functionality we'd like from our project which is great for operations you just need to do on the fly.

    At the moment if you run the site and open /admin goto PRODUCTS-Products then choose a products you'll see a Has sizes field and as a default is set to no. To turn that to yes on some use the following shell commands)
            In [1]: from products.models import Product
            In [2]: kdbb = ['bed_bath','kitchen_dining']
            In [3]: clothes = Product.objects.exlude[categotry__name__in='kdbb']
            In [4]: clothes.count()
            Out [4]: 130
            In [5]: for item in clothes:
                        item.has_sizes = True
                        item.save()
                        then press enter again to execute
            In[6]: Product.objects.filter(has_sizes=True)
                            # to check if they have filtered
                            see:
                                    a big list of 130 items 
            In[7]: Product.objects.filter(has_sizes=True).count
            Out [7]: 130
            In [8]: exit()

    Check the update has ocurred by running server -  opening /admin goto PRODUCTS-Products then choose a products you'll see a Has sizes field has updated to True for 130 cases. You have updated the database!

Add a size-selector box to the product_detail page
Goto products/templates/product_detail.html
    add a size selector box

when you render the site the box will appear on the correct products but doesn't do anything yet.


Add size field to the bag.html
    rendered site shows label but not correct value for items tha has_sizes=True

cli: git add . 
cli: git commit -m "added sizes to product model and size selector box to product template"
cli: git push      

---------------------------------------------------------------------------------------------------------------------------------------------------------
Adding products (to the shopping bag) part 4


Goto the site and look at special offers
    and some products have sizes which shouldn't. go into admina and manually change has_sizes from yes to no and save.

Now to the rendering of product sizes in the bag need to update context.py (context processor) and the add_to_bag view

cli: git add . 
cli: git commit -m "Finished product size logic"
cli: git push