Goto https://github.com/Code-Institute-Org/gitpod-full-template
    Use template
    Name repo
    Make public
    Open Gitpod (you'll need the Gitpod addon)

cli: pip3 install django
cli: django-admin startproject boutique_ado .
cli: touch .gitignore
    add *.sqlite3
    add *.pyc
    add __pycache__

In the file explorer now we'll see we have 3 new items: 
boutique_ado    manage.py   .gitignore   

cli: python3 manage.py runserver
    to check - looks good

cli: ^c
    close server

cli: python3 manage.py migrate
cli: python3 manage.py createsuperuser

cli: git status
cli: git remote -v
cli: git add .
cli: git commit -m "initial commit"
cli: git push

cli: pip3 install django-allauth

From allauth documentation copy and paste settings into settings.py file
    https://django-allauth.readthedocs.io/en/latest/installation.html
    you need:
1)  'django.template.context_processors.request',           should already be there under TEMPLATES
    allows allauth and django to access the HTTP request object in our templates.
    E.g., if we wanted to access request.user or request.user.email in our django templates. We'll be able to do it with this context processor.
    It's required because the allauth templates which we'll see and customize later on use the request object frequently.
2)  AUTHENTICATION_BACKENDS
        remove before and after dots
        see notes in the actual file
3)  from INSTALLED_APPS
        'django.contrib.sites',
            used by the allauth.socialaccount to create the proper callback URLs
        'allauth',
            this is the actual allauth app
        'allauth.account',
            allows all the basic account login/logout/registration/password resets
        'allauth.socialaccount'
            allows logins via social media
4)  add the following phrase after AUTHENTICATION_BACKENDS section:
    SITE_ID = 1
5)  add the following phrase after SITE_ID = 1: 
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    Note: by default allauth will send confirmation emails to any new accounts. We need to temporarily log those emails to the console so we can get the confirmation links.
6)  see below.

update urls.py (line 17 and 21) to give us the urls needed to login/logout etc

cli: python3 manage.py migrate  
    we added apps so now we have to make migrations

cli: python3 manage.py runserver
    see 404, goto /admin, login, click sites, click example, update domain name and display name. Save
        critical if you want to use social media authentication

cli: ^c

6 continued)  add the following phrases after EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
        The account authentication method is what tells allauth that we want to allow authentication using either usernames or emails.
    ACCOUNT_EMAIL_REQUIRED = True
        email is required to register for the site.
    ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
        Verifying your email is mandatory so we know users are using a real email.
    ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = True
        required to enter their email twice on the registration page
    ACCOUNT_USERNAME_MIN_LENGTH = 4
        a minimum username length of four characters.
    LOGIN_URL = '/accounts/login/'
        specifying a login url and a url to redirect back to after logging in.
    LOGIN_REDIRECT_URL = '/'
        change to LOGIN_REDIRECT_URL = '/success' for the test below , then change it back

cli: python3 manage.py runserver
    see 404, goto /accounts/login/.
    Login using the superuser id and password.
        See 'Verify Your E-mail Address' but this won't work because this id was created before installing allauth.
        Therefore, add email manually
        goto /admin, see all models listed, click email addresses, click add email address, enter id, generate email, check all boxes, save, logout
    goto /accounts/login/
    Login using the superuser id and password.
        see url ending in /success
        this proves authentication is working properly
        change the settings from '/success' back to '/'

cli: pip3 freeze > requirements.txt

cli:mkdir templates
    this produces a project level templates file for base.html (so not an app based templates directory)

cli:mkdir templates/allauth
    puts an allauth dr in the templates dr (both or which will be in the project level)

cli: git status
    see:
        boutique_ado/settings.py
        boutique_ado/urls.py
        instructions.txt
        requirements.txt
cli: git add .
cli: git commit -m "setup allauth"
cli: git push

Customise the supplied allauth templates:
-   they live in the site-packages directory (see hello django repo on github)
cli: cp -r ../.pip-modules/lib/python3.8/site-packages/allauth/templates/* ./templates/allauth/
    cp - r which means to copy(cp) recursively (-r)
     ../ to go up one level from where we are right now
    .pip-modules/lib /python (press tab to autopoulate)
    /site-packages /allauth/templates
    /* copies everything in the directory
     ./templates/allauth/ is the destination you want to move to
-   If you want to use the standard allauth templates i.e. not customise them then delete from the templates/allauth dr
        delete openid
        delete tests
End (customise the supplied allauth templates)

cli: touch templates/base.html
    opens a file in the project level's template directory (i.e. not the app level)
    goto getbootstarp, vlick documentation, scroll to starter template, copy it paste it in to base,html
    add a line to base.html header: <meta http-equiv="X-UA-compatible" content="ie=edge">
        Will allow support of older Internet Explorer versions and eliminate validation errors when validating our HTML.
    Update title
    move script files to header
    add {% add static %} 
        allows addition of static files later

cli: git status
cli: git add .
cli: git commit -m "added allauth templates and base templates"
cli: git push





cli: mkdir -p home/templates/home




Under todo
    add templates folder
        add todo folder
            add todo_list.html file

cli: python3 manage.py makemigrations --dry-run
    migrations are Django's way of converting python code into sql language without the developer having to write any sql
    this command (without the --dry-run flag) creates a file whereby any new 'class' in 'models.py' are staged for migration
    use the dry run flag to do trial before commiting to an actual migration without the flag
    Once you create a new 'class' in 'models.py' and run the command a new file apears in the migrations folder
        e.g. 0001_initial.py 
cli: python3 manage.py showmigrations
    shows ocurred migrations i.e. stuff that comes with Django that allows superuser creation. You need to do the next command first
cli: python3 manage.py migrate --plan
    this essentially 'commits' changes
    the --plan flag shows you what is staged for 'commit'. Not including it allows the migrate to actually occur


cli: python3 manage.py tests
    Will run all tests
cli: python3 manage.py tests todo.test_forms
    runs all tests in the test_forms
cli: python3 manage.py tests todo.test_forms.TestItemForm
    runs all tests in the TestItemForm class
cli: python3 manage.py tests todo.test_forms.TestItemForm.test_item_name_is_required
    Runs a specific single test

cli: pip3 install coverage
    installs coverage tool
    tells you how much of your code has been tested
cli: coverage run --source=todo manage.py test
    selects file to test
cli: coverage report
     generates a report in the cli
cli: coverage html
    generates a folder called htmlcov, within it there is an html report that you can interrogate it will be called
cli: python3 -m http.server
    look at in the server
    only the htmlcov/ link will open