Goto https://github.com/Code-Institute-Org/gitpod-full-template
    Use template
    Name repo
    Make public
    Open Gitpod (you'll need the Gitpod addon)

cli: pip3 install django
cli: django-admin startproject boutique_ado .
cli: touch .gitignore
    add *.sqlite3
    add *.pyc
    add __pycache__

In the file explorer now we'll see we have 3 new items: 
boutique_ado    manage.py   .gitignore   

cli: python3 manage.py runserver
    to check - looks good

cli: ^c
    close server

cli: python3 manage.py migrate
cli: python3 manage.py createsuperuser

cli: git status
cli: git remote -v
cli: git add .
cli: git commit -m "initial commit"
cli: git push

cli: pip3 install django-allauth

From allauth documentation copy and paste settings into settings.py file
    https://django-allauth.readthedocs.io/en/latest/installation.html
    you need:
1)  'django.template.context_processors.request',           should already be there under TEMPLATES
    allows allauth and django to access the HTTP request object in our templates.
    E.g., if we wanted to access request.user or request.user.email in our django templates. We'll be able to do it with this context processor.
    It's required because the allauth templates which we'll see and customize later on use the request object frequently.
2)  AUTHENTICATION_BACKENDS
        remove before and after dots
        see notes in the actual file
3)  from INSTALLED_APPS
        'django.contrib.sites',
            used by the allauth.socialaccount to create the proper callback URLs
        'allauth',
            this is the actual allauth app
        'allauth.account',
            allows all the basic account login/logout/registration/password resets
        'allauth.socialaccount'
            allows logins via social media
4)  add the following phrase after AUTHENTICATION_BACKENDS section:
    SITE_ID = 1
5)  add the following phrase after SITE_ID = 1: 
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    Note: by default allauth will send confirmation emails to any new accounts. We need to temporarily log those emails to the console so we can get the confirmation links.
6)  see below.

update urls.py (line 17 and 21) to give us the urls needed to login/logout etc

cli: python3 manage.py migrate  
    we added apps so now we have to make migrations

cli: python3 manage.py runserver
    see 404, goto /admin, login, click sites, click example, update domain name and display name. Save
        critical if you want to use social media authentication

cli: ^c

6 continued)  add the following phrases after EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
        The account authentication method is what tells allauth that we want to allow authentication using either usernames or emails.
    ACCOUNT_EMAIL_REQUIRED = True
        email is required to register for the site.
    ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
        Verifying your email is mandatory so we know users are using a real email.
    ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = True
        required to enter their email twice on the registration page
    ACCOUNT_USERNAME_MIN_LENGTH = 4
        a minimum username length of four characters.
    LOGIN_URL = '/accounts/login/'
        specifying a login url and a url to redirect back to after logging in.
    LOGIN_REDIRECT_URL = '/'
        change to LOGIN_REDIRECT_URL = '/success' for the test below , then change it back

cli: python3 manage.py runserver
    see 404, goto /accounts/login/.
    Login using the superuser id and password.
        See 'Verify Your E-mail Address' but this won't work because this id was created before installing allauth.
        Therefore, add email manually
        goto /admin, see all models listed, click email addresses, click add email address, enter id, generate email, check all boxes, save, logout
    goto /accounts/login/
    Login using the superuser id and password.
        see url ending in /success
        this proves authentication is working properly
        change the settings from '/success' back to '/'

cli: pip3 freeze > requirements.txt

cli:mkdir templates
    this produces a project level templates file for base.html (so not an app based templates directory)

cli:mkdir templates/allauth
    puts an allauth dr in the templates dr (both or which will be in the project level)

cli: git status
    see:
        boutique_ado/settings.py
        boutique_ado/urls.py
        instructions.txt
        requirements.txt
cli: git add .
cli: git commit -m "setup allauth"
cli: git push

Customise the supplied allauth templates:
-   they live in the site-packages directory (see hello django repo on github)
cli: cp -r ../.pip-modules/lib/python3.8/site-packages/allauth/templates/* ./templates/allauth/
    cp - r which means to copy(cp) recursively (-r)
     ../ to go up one level from where we are right now
    .pip-modules/lib /python (press tab to autopoulate)
    /site-packages /allauth/templates
    /* copies everything in the directory
     ./templates/allauth/ is the destination you want to move to
-   If you want to use the standard allauth templates i.e. not customise them then delete from the templates/allauth dr
        delete openid
        delete tests
End (customise the supplied allauth templates)

cli: touch templates/base.html
    opens a file in the project level's template directory (i.e. not the app level)
    goto getbootstarp, vlick documentation, scroll to starter template, copy it paste it in to base,html
    add a line to base.html header: <meta http-equiv="X-UA-compatible" content="ie=edge">
        Will allow support of older Internet Explorer versions and eliminate validation errors when validating our HTML.
    Update title
    move script files to header

cli: git status
    see:
        templates/
cli: git add .
cli: git commit -m "added allauth templates and base templates"
    see:
        47 file changes
cli: git push

back to project's base.html
    add {% add static %} 
        allows addition of static files later
    add lots of {%%} blocks

cli: git status
    see:
        templates/base.html
cli: git add .
cli: git commit -m "added blocks to base template"
cli: git push

cli: python3 manage.py startapp home
    new app for homepege opens
    see folders:
        boutique_ado
        templates
        home folder

cli: mkdir -p home/templates/home
    makes a templates and internal home directory in the home app
    - add an index.html file and add some test content

Render the home app's index page
-   create a view for the app's index page from the existing views.py file
        at the app level goto home/views.py
-   create a urls.py file for the app's index page by copying and pasting the projects urls.py file
        goto boutique_ado at the project level and duplicate 'urls.py', put it in the app (home) and name it 'urls.py'
            strip out the top docstring
            delete the include import
            delete the existing paths
            include the import on line 3
            include the path to the app's index.html on line 6
-   update project level urls.py file line 22
-   Goto project level settings.py file
        add 'home' to the list of INSTALLED_APPS
        add the following to the DIRS in TEMPLATES:
            os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, 'templates', 'allauth'),
cli: python3 manage.py runserver
    see:
        It works! in big green writing
End(render the home app's index page)

cli: ^c
cli: git status
    see:
        boutique_ado/settings.py
        boutique_ado/urls.py
        instructions.txt
        home/
cli: git add .
cli: git commit -m "added home app and templates"
cli: git push

Update home/templates/home/index.html
cli: git status 
    see:
       home/templates/home/index.html
cli: git add .
cli: git commit -m "Added homepage content"
cli: git push        

Update templates/base.html
cli: git status 
    see:
       templates/base.html
cli: git add .
cli: git commit -m "Added main page header"
cli: git push        

cli: python3 manage.py runserver
    see:
        really rough looking home page
    Note: If you perform a search e.g. search for frog then the resultant url will end .gitpod.io/?q=frog. The q confirms the form is working as the form's name=q - see project level template/base.html

cli: mkdir static
    where css and js files will live
cli: mkdir static/css 
    then create a base.css file
    add styling for html and body tags 
cli: mkdir media
    holds the images and is where new images are uploaded to
    add homepage_background_cropped.jpg

cli: python3 manage.py runserver
    see:
        really rough looking home page - but can't see background image

goto static/css/base.css file
    add the rest of the css

goto templates/base.html
    add base.css link
    add Lato font link
        goto google fonts
        search for Lato
        click lato 
        select regular 400 and + select this style
        click Embed 
        copy and paste link
    add FA font link
        goto FA
        login
        scroll to FA fits 
        click manage kits 
        click aOff73228b
        copy and paste link

goto settings.py and underneath the STATIC_URL setting.
    add STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)
        Which is going to tell Django where all of our static files are located.
        It is worth noting that although normally we would also want to supply a static route setting here for Django's collect static utility to work.
        I'm not going to do that because it will interfere with setting up Amazon Web Services later on.
        Has to be a tuple, hence the brackets and comma at end
    add MEDIA_URL = '/media/'
    add MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
        which is where all uploaded media files will go.

To allow Django to see the media (remember the background image with the girl is still not visible
    goto boutique_ado/urls.py
        import settings
        import the static function
            to add the MEDIA_URL to our list of URLs.
        then use the static function:
            add + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

cli: python3 manage.py runserver
    see:
        looks good - can see background image. The main site header is now visible on large viewports only. With the logo in the upper left the search bar in the middle and the My account and shopping bag links on the right.

cli: git status
    see:
        media
        static
cli: git add .
cli: git commit -m "completed home page header and css"
cli: And git push

Now we add header for small viewports and extend the header features (for all vp sizes) to allow users to sort
    goto templates/base.html
        add further navbar Code
        Note: this won't preview (i.e. python3 manage.py runserver) because of the Django Template Logic is not linked to anything so 404 error.

    cli: mkdir templates/includes
        a commonly occuring directory in larger web projects
        place to create HTMLsnippets and then include them in the base.html template using Django.
        Create 2 new files:
            main-nav.html
            mobile-top-header.html
    
    cli: python3 manage.py runserver
        see a responsive header with all functionality
end (Now we add header for small viewports ........... to allow users to sort)

set up free shipping banner
    add free_shipping_threshold to base.html (which will then link to products app later) and class to base.css
    check to out:
        cli: python3 manage.py runserver
            see a banner that doesn't function yet - need to app products app

cli: git status
    see:
        static/css/base.css
        templates/base.html
        templates/includes/
cli: git add .
cli: git commit -m "added mobile_header and main navbar"
cli: And git push


